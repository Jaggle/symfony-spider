<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Job;
use Doctrine\ORM\EntityRepository;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
    /**
     * 创建一个job
     *
     * @param $spiderId
     * @param $link
     * @return Job
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function createJob($spiderId, $link)
    {
        $job = new Job();
        
        $job->setSpiderId($spiderId);
        $job->setLink($link);
        $job->setRetry(0);
        $job->setStatus('not_start');
        $job->setFailed(false);
        
        $nowDate = new \DateTime();
        
        $job->setUpdateTime($nowDate);
        $job->setCreateTime($nowDate);
        
        $this->getEntityManager()->persist($job);
        $this->getEntityManager()->flush();

        return $job;
    }
    
    /**
     * 获取一个没有执行过的job
     *
     * @param $spiderId
     * @param $query
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOneUnProcessJob($spiderId, $query)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.status = :status')->setParameter('status','not_start')
            ->andWhere('p.retry < 3')
            ->andWhere('p.spiderId = :spiderId')->setParameter('spiderId', $spiderId)
            ->andWhere('p.link like :query')->setParameter('query', "%$query%")
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * 获取所有没有执行过的job id
     *
     * @param $spiderId
     * @param $query
     * @return array
     */
    public function getAllUnProcessJobIds($spiderId, $query = '')
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p.id')
            ->where('p.spiderId = :spiderId')->setParameter('spiderId', $spiderId)
            ->andWhere('p.status = :status')->setParameter('status', 'not_start')
            ->andWhere('p.retry < 3');

        if ($query) {
            $queryBuilder->andWhere('p.link like :query')->setParameter('query', "%$query%");
        }

        $res = $queryBuilder->getQuery()->getArrayResult();

        return array_column($res, 'id');
    }
    
    /**
     * 完成一个job
     *
     * @param Job $job
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function finishJob(Job $job)
    {
         $job->setStatus("finished");
         $job->setUpdateTime(new \DateTime());
         
         $this->getEntityManager()->flush();
    }

    public function updateJobStatus(Job $job, $status)
    {
        $job->setStatus($status);
        $job->setUpdateTime(new \DateTime());

        $this->getEntityManager()->flush();
    }

    /**
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function resetJobStatus()
    {
        /**
         * @var Job[] $jobs
         */
        $jobs = $this->findBy(['status' => 'processing']);
        foreach ($jobs as $key => $val) {
            $val->setStatus('not_start');
            if ($key%10 == 0) {
                $this->_em->flush();
            }
        }

        $this->_em->flush();
    }
}
